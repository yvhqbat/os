// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: admin.proto

#ifndef PROTOBUF_INCLUDED_admin_2eproto
#define PROTOBUF_INCLUDED_admin_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_admin_2eproto 

namespace protobuf_admin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_admin_2eproto
class AddUserRequest;
class AddUserRequestDefaultTypeInternal;
extern AddUserRequestDefaultTypeInternal _AddUserRequest_default_instance_;
class AddUserResponse;
class AddUserResponseDefaultTypeInternal;
extern AddUserResponseDefaultTypeInternal _AddUserResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::AddUserRequest* Arena::CreateMaybeMessage<::AddUserRequest>(Arena*);
template<> ::AddUserResponse* Arena::CreateMaybeMessage<::AddUserResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class AddUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AddUserRequest) */ {
 public:
  AddUserRequest();
  virtual ~AddUserRequest();

  AddUserRequest(const AddUserRequest& from);

  inline AddUserRequest& operator=(const AddUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddUserRequest(AddUserRequest&& from) noexcept
    : AddUserRequest() {
    *this = ::std::move(from);
  }

  inline AddUserRequest& operator=(AddUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddUserRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddUserRequest* internal_default_instance() {
    return reinterpret_cast<const AddUserRequest*>(
               &_AddUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AddUserRequest* other);
  friend void swap(AddUserRequest& a, AddUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddUserRequest* New() const final {
    return CreateMaybeMessage<AddUserRequest>(NULL);
  }

  AddUserRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddUserRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddUserRequest& from);
  void MergeFrom(const AddUserRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:AddUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_admin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AddUserResponse) */ {
 public:
  AddUserResponse();
  virtual ~AddUserResponse();

  AddUserResponse(const AddUserResponse& from);

  inline AddUserResponse& operator=(const AddUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddUserResponse(AddUserResponse&& from) noexcept
    : AddUserResponse() {
    *this = ::std::move(from);
  }

  inline AddUserResponse& operator=(AddUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddUserResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddUserResponse* internal_default_instance() {
    return reinterpret_cast<const AddUserResponse*>(
               &_AddUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AddUserResponse* other);
  friend void swap(AddUserResponse& a, AddUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddUserResponse* New() const final {
    return CreateMaybeMessage<AddUserResponse>(NULL);
  }

  AddUserResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddUserResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddUserResponse& from);
  void MergeFrom(const AddUserResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ak = 2;
  void clear_ak();
  static const int kAkFieldNumber = 2;
  const ::std::string& ak() const;
  void set_ak(const ::std::string& value);
  #if LANG_CXX11
  void set_ak(::std::string&& value);
  #endif
  void set_ak(const char* value);
  void set_ak(const char* value, size_t size);
  ::std::string* mutable_ak();
  ::std::string* release_ak();
  void set_allocated_ak(::std::string* ak);

  // string sk = 3;
  void clear_sk();
  static const int kSkFieldNumber = 3;
  const ::std::string& sk() const;
  void set_sk(const ::std::string& value);
  #if LANG_CXX11
  void set_sk(::std::string&& value);
  #endif
  void set_sk(const char* value);
  void set_sk(const char* value, size_t size);
  ::std::string* mutable_sk();
  ::std::string* release_sk();
  void set_allocated_sk(::std::string* sk);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AddUserResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ak_;
  ::google::protobuf::internal::ArenaStringPtr sk_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_admin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddUserRequest

// string name = 1;
inline void AddUserRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserRequest::name() const {
  // @@protoc_insertion_point(field_get:AddUserRequest.name)
  return name_.GetNoArena();
}
inline void AddUserRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddUserRequest.name)
}
#if LANG_CXX11
inline void AddUserRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddUserRequest.name)
}
#endif
inline void AddUserRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddUserRequest.name)
}
inline void AddUserRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddUserRequest.name)
}
inline ::std::string* AddUserRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AddUserRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserRequest::release_name() {
  // @@protoc_insertion_point(field_release:AddUserRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AddUserRequest.name)
}

// string password = 2;
inline void AddUserRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserRequest::password() const {
  // @@protoc_insertion_point(field_get:AddUserRequest.password)
  return password_.GetNoArena();
}
inline void AddUserRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddUserRequest.password)
}
#if LANG_CXX11
inline void AddUserRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddUserRequest.password)
}
#endif
inline void AddUserRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddUserRequest.password)
}
inline void AddUserRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddUserRequest.password)
}
inline ::std::string* AddUserRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:AddUserRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserRequest::release_password() {
  // @@protoc_insertion_point(field_release:AddUserRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:AddUserRequest.password)
}

// -------------------------------------------------------------------

// AddUserResponse

// int32 id = 1;
inline void AddUserResponse::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 AddUserResponse::id() const {
  // @@protoc_insertion_point(field_get:AddUserResponse.id)
  return id_;
}
inline void AddUserResponse::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:AddUserResponse.id)
}

// string ak = 2;
inline void AddUserResponse::clear_ak() {
  ak_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserResponse::ak() const {
  // @@protoc_insertion_point(field_get:AddUserResponse.ak)
  return ak_.GetNoArena();
}
inline void AddUserResponse::set_ak(const ::std::string& value) {
  
  ak_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddUserResponse.ak)
}
#if LANG_CXX11
inline void AddUserResponse::set_ak(::std::string&& value) {
  
  ak_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddUserResponse.ak)
}
#endif
inline void AddUserResponse::set_ak(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ak_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddUserResponse.ak)
}
inline void AddUserResponse::set_ak(const char* value, size_t size) {
  
  ak_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddUserResponse.ak)
}
inline ::std::string* AddUserResponse::mutable_ak() {
  
  // @@protoc_insertion_point(field_mutable:AddUserResponse.ak)
  return ak_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserResponse::release_ak() {
  // @@protoc_insertion_point(field_release:AddUserResponse.ak)
  
  return ak_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserResponse::set_allocated_ak(::std::string* ak) {
  if (ak != NULL) {
    
  } else {
    
  }
  ak_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ak);
  // @@protoc_insertion_point(field_set_allocated:AddUserResponse.ak)
}

// string sk = 3;
inline void AddUserResponse::clear_sk() {
  sk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AddUserResponse::sk() const {
  // @@protoc_insertion_point(field_get:AddUserResponse.sk)
  return sk_.GetNoArena();
}
inline void AddUserResponse::set_sk(const ::std::string& value) {
  
  sk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddUserResponse.sk)
}
#if LANG_CXX11
inline void AddUserResponse::set_sk(::std::string&& value) {
  
  sk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddUserResponse.sk)
}
#endif
inline void AddUserResponse::set_sk(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddUserResponse.sk)
}
inline void AddUserResponse::set_sk(const char* value, size_t size) {
  
  sk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddUserResponse.sk)
}
inline ::std::string* AddUserResponse::mutable_sk() {
  
  // @@protoc_insertion_point(field_mutable:AddUserResponse.sk)
  return sk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddUserResponse::release_sk() {
  // @@protoc_insertion_point(field_release:AddUserResponse.sk)
  
  return sk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddUserResponse::set_allocated_sk(::std::string* sk) {
  if (sk != NULL) {
    
  } else {
    
  }
  sk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sk);
  // @@protoc_insertion_point(field_set_allocated:AddUserResponse.sk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_admin_2eproto
